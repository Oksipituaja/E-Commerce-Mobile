var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNextjsVersion = getNextjsVersion;
    exports.checkNextVersion = checkNextVersion;
    const fs_1 = require("fs");
    const path_1 = require("path");
    /**
     * Cleans version string by removing special characters (^, ~, >, <, =, v)
     * @param version - Raw version string from package.json
     */
    const cleanVersionString = (version) => {
        return version.replace(/[^\d.]/g, '');
    };
    /**
     * Gets the Next.js major version from package.json
     * @param projectPath - Path to the project root directory
     * @returns Promise containing version information and status
     */
    function getNextjsVersion() {
        return __awaiter(this, arguments, void 0, function* (projectPath = process.cwd()) {
            var _a, _b;
            try {
                const packageJsonPath = (0, path_1.join)(projectPath, 'package.json');
                // Check if package.json exists
                if (!(0, fs_1.existsSync)(packageJsonPath)) {
                    return {
                        version: '',
                        majorVersion: 0,
                        isNextjs15OrHigher: false,
                        error: 'package.json not found',
                    };
                }
                // Read and parse package.json
                const packageJson = JSON.parse((0, fs_1.readFileSync)(packageJsonPath, 'utf8'));
                // Check both dependencies and devDependencies for next
                const nextVersion = ((_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a.next) || ((_b = packageJson.devDependencies) === null || _b === void 0 ? void 0 : _b.next);
                if (!nextVersion) {
                    return {
                        version: '',
                        majorVersion: 0,
                        isNextjs15OrHigher: false,
                        error: 'Next.js not found in dependencies',
                    };
                }
                // Clean the version string and get major version
                const cleanVersion = cleanVersionString(nextVersion);
                const majorVersion = parseInt(cleanVersion.split('.')[0], 10);
                // Validate that majorVersion is a number
                if (isNaN(majorVersion)) {
                    return {
                        version: cleanVersion,
                        majorVersion: 0,
                        isNextjs15OrHigher: false,
                        error: 'Invalid version format',
                    };
                }
                return {
                    version: cleanVersion,
                    majorVersion,
                    isNextjs15OrHigher: majorVersion >= 15,
                };
            }
            catch (error) {
                return {
                    version: '',
                    majorVersion: 0,
                    isNextjs15OrHigher: false,
                    error: error instanceof Error ? error.message : 'Unknown error occurred',
                };
            }
        });
    }
    // Example usage with types:
    function checkNextVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield getNextjsVersion();
                if (result.error) {
                    // log.error(`Error: ${result.error}`);
                    return false;
                }
                return result.isNextjs15OrHigher;
            }
            catch (error) {
                // log.error(`Unexpected error: ${error}`);
                return undefined;
            }
        });
    }
});
