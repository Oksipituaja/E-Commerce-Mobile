import { ComponentConfig } from '../dependencies';
declare const projectRootPath: string;
declare const getAllComponents: () => Promise<string[]>;
interface AdditionalDependencies {
    components: string[];
    hooks: string[];
}
declare function checkComponentDependencies(components: string[]): Promise<AdditionalDependencies>;
declare const cloneRepositoryAtRoot: (rootPath: string, alpha?: boolean) => Promise<void>;
export declare function findLockFileType(): string | null;
declare function getPackageMangerFlag(options: any): "npm" | "yarn" | "pnpm" | "bun" | undefined;
export declare const promptVersionManager: () => Promise<any>;
declare const installDependencies: (input: string[] | string, versionManager: string | null, additionalDependencies?: ComponentConfig | undefined) => Promise<void>;
declare function detectProjectType(directoryPath: string): Promise<string>;
declare function isValidPath(path: string): boolean;
declare const checkWritablePath: (path: string) => Promise<boolean>;
declare function removeHyphen(str: string): string;
declare function getRelativePath({ sourcePath, targetPath, }: {
    sourcePath: string;
    targetPath: string;
}): string;
declare function ensureFilesPromise(filePaths: string[]): Promise<boolean>;
export { cloneRepositoryAtRoot, getAllComponents, detectProjectType, isValidPath, checkWritablePath, projectRootPath, installDependencies, removeHyphen, getRelativePath, ensureFilesPromise, getPackageMangerFlag, checkComponentDependencies, };
