var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@clack/prompts", "../add-patch-file", "./modify-package-json"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addReactNativeWebPatch = addReactNativeWebPatch;
    const prompts_1 = require("@clack/prompts");
    const add_patch_file_1 = require("../add-patch-file");
    const modify_package_json_1 = require("./modify-package-json");
    function addReactNativeWebPatch() {
        return __awaiter(this, void 0, void 0, function* () {
            const s = (0, prompts_1.spinner)();
            s.start('‚è≥ Adding react-native-web patch');
            const isPatchAdded = yield (0, add_patch_file_1.setupReactNativeWebPatch)();
            if (!isPatchAdded) {
                prompts_1.log.error('Failed to add react-native-web patch');
                process.exit(1);
            }
            (0, modify_package_json_1.updatePackageJson)(process.cwd());
            s.stop(`\x1b[32mReact-native-web patch added.\x1b[0m`);
        });
    }
});
