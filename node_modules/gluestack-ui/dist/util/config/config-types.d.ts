import { z } from 'zod';
export declare const PROJECT_SHARED_IGNORE: string[];
export declare const RawConfigSchema: z.ZodObject<{
    tailwind: z.ZodObject<{
        config: z.ZodDefault<z.ZodString>;
        css: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        config: string;
        css: string;
    }, {
        config?: string | undefined;
        css?: string | undefined;
    }>;
    app: z.ZodObject<{
        entry: z.ZodDefault<z.ZodString>;
        components: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        components: string;
        entry: string;
    }, {
        components?: string | undefined;
        entry?: string | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    tailwind: {
        config: string;
        css: string;
    };
    app: {
        components: string;
        entry: string;
    };
}, {
    tailwind: {
        config?: string | undefined;
        css?: string | undefined;
    };
    app: {
        components?: string | undefined;
        entry?: string | undefined;
    };
}>;
export declare const NextResolvedConfigSchema: z.ZodObject<{
    tailwind: z.ZodObject<{
        config: z.ZodDefault<z.ZodString>;
        css: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        config: string;
        css: string;
    }, {
        config?: string | undefined;
        css?: string | undefined;
    }>;
    config: z.ZodObject<{
        postCssConfig: z.ZodDefault<z.ZodString>;
        tsConfig: z.ZodDefault<z.ZodString>;
        nextConfig: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        postCssConfig: string;
        tsConfig: string;
        nextConfig: string;
    }, {
        postCssConfig?: string | undefined;
        tsConfig?: string | undefined;
        nextConfig?: string | undefined;
    }>;
    app: z.ZodObject<{
        type: z.ZodOptional<z.ZodString>;
        entry: z.ZodString;
        registry: z.ZodOptional<z.ZodString>;
        page: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        entry: string;
        type?: string | undefined;
        page?: string | undefined;
        registry?: string | undefined;
    }, {
        entry: string;
        type?: string | undefined;
        page?: string | undefined;
        registry?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    config: {
        postCssConfig: string;
        tsConfig: string;
        nextConfig: string;
    };
    tailwind: {
        config: string;
        css: string;
    };
    app: {
        entry: string;
        type?: string | undefined;
        page?: string | undefined;
        registry?: string | undefined;
    };
}, {
    config: {
        postCssConfig?: string | undefined;
        tsConfig?: string | undefined;
        nextConfig?: string | undefined;
    };
    tailwind: {
        config?: string | undefined;
        css?: string | undefined;
    };
    app: {
        entry: string;
        type?: string | undefined;
        page?: string | undefined;
        registry?: string | undefined;
    };
}>;
export declare const ExpoResolvedConfigSchema: z.ZodObject<{
    tailwind: z.ZodObject<{
        config: z.ZodDefault<z.ZodString>;
        css: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        config: string;
        css: string;
    }, {
        config?: string | undefined;
        css?: string | undefined;
    }>;
    config: z.ZodObject<{
        babelConfig: z.ZodDefault<z.ZodString>;
        tsConfig: z.ZodDefault<z.ZodString>;
        metroConfig: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tsConfig: string;
        babelConfig: string;
        metroConfig: string;
    }, {
        tsConfig?: string | undefined;
        babelConfig?: string | undefined;
        metroConfig?: string | undefined;
    }>;
    app: z.ZodObject<{
        type: z.ZodOptional<z.ZodString>;
        entry: z.ZodString;
        sdk50: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        entry: string;
        type?: string | undefined;
        sdk50?: boolean | undefined;
    }, {
        entry: string;
        type?: string | undefined;
        sdk50?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    config: {
        tsConfig: string;
        babelConfig: string;
        metroConfig: string;
    };
    tailwind: {
        config: string;
        css: string;
    };
    app: {
        entry: string;
        type?: string | undefined;
        sdk50?: boolean | undefined;
    };
}, {
    config: {
        tsConfig?: string | undefined;
        babelConfig?: string | undefined;
        metroConfig?: string | undefined;
    };
    tailwind: {
        config?: string | undefined;
        css?: string | undefined;
    };
    app: {
        entry: string;
        type?: string | undefined;
        sdk50?: boolean | undefined;
    };
}>;
export declare const ReactNativeResolvedSchema: z.ZodObject<{
    tailwind: z.ZodObject<{
        config: z.ZodDefault<z.ZodString>;
        css: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        config: string;
        css: string;
    }, {
        config?: string | undefined;
        css?: string | undefined;
    }>;
    config: z.ZodObject<{
        babelConfig: z.ZodDefault<z.ZodString>;
        tsConfig: z.ZodDefault<z.ZodString>;
        metroConfig: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tsConfig: string;
        babelConfig: string;
        metroConfig: string;
    }, {
        tsConfig?: string | undefined;
        babelConfig?: string | undefined;
        metroConfig?: string | undefined;
    }>;
    app: z.ZodObject<{
        type: z.ZodOptional<z.ZodString>;
        entry: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        entry: string;
        type?: string | undefined;
    }, {
        entry: string;
        type?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    config: {
        tsConfig: string;
        babelConfig: string;
        metroConfig: string;
    };
    tailwind: {
        config: string;
        css: string;
    };
    app: {
        entry: string;
        type?: string | undefined;
    };
}, {
    config: {
        tsConfig?: string | undefined;
        babelConfig?: string | undefined;
        metroConfig?: string | undefined;
    };
    tailwind: {
        config?: string | undefined;
        css?: string | undefined;
    };
    app: {
        entry: string;
        type?: string | undefined;
    };
}>;
export type RawConfig = z.infer<typeof RawConfigSchema>;
export type NextResolvedConfig = z.infer<typeof NextResolvedConfigSchema>;
export type ExpoResolvedConfig = z.infer<typeof ExpoResolvedConfigSchema>;
export type ReactNativeResolvedConfig = z.infer<typeof ReactNativeResolvedSchema>;
