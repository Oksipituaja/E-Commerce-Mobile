(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "zod"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactNativeResolvedSchema = exports.ExpoResolvedConfigSchema = exports.NextResolvedConfigSchema = exports.RawConfigSchema = exports.PROJECT_SHARED_IGNORE = void 0;
    const zod_1 = require("zod");
    exports.PROJECT_SHARED_IGNORE = [
        '**/node_modules/**',
        '.next',
        'public',
        'dist',
        'build',
    ];
    exports.RawConfigSchema = zod_1.z
        .object({
        tailwind: zod_1.z.object({
            config: zod_1.z.string().default('tailwind.config.js'),
            css: zod_1.z.string().default('global.css'),
        }),
        app: zod_1.z.object({
            entry: zod_1.z.string().default(''),
            components: zod_1.z.string().default('components/ui'),
        }),
    })
        .strict();
    exports.NextResolvedConfigSchema = zod_1.z.object({
        tailwind: zod_1.z.object({
            config: zod_1.z.string().default(''),
            css: zod_1.z.string().default('global.css'),
        }),
        config: zod_1.z.object({
            postCssConfig: zod_1.z.string().default('postcss.config.js'),
            tsConfig: zod_1.z.string().default('tsconfig.json'),
            nextConfig: zod_1.z.string().default('next.config.js'),
        }),
        app: zod_1.z.object({
            type: zod_1.z.string().optional(),
            entry: zod_1.z.string(),
            registry: zod_1.z.string().optional(),
            page: zod_1.z.string().optional(),
        }),
    });
    exports.ExpoResolvedConfigSchema = zod_1.z.object({
        tailwind: zod_1.z.object({
            config: zod_1.z.string().default('tailwind.config.js'),
            css: zod_1.z.string().default('global.css'),
        }),
        config: zod_1.z.object({
            babelConfig: zod_1.z.string().default('babel.config.js'),
            tsConfig: zod_1.z.string().default('tsconfig.json'),
            metroConfig: zod_1.z.string().default('metro.config.js'),
        }),
        app: zod_1.z.object({
            type: zod_1.z.string().optional(),
            entry: zod_1.z.string(),
            sdk50: zod_1.z.boolean().optional(),
        }),
    });
    exports.ReactNativeResolvedSchema = zod_1.z.object({
        tailwind: zod_1.z.object({
            config: zod_1.z.string().default('tailwind.config.js'),
            css: zod_1.z.string().default('global.css'),
        }),
        config: zod_1.z.object({
            babelConfig: zod_1.z.string().default('babel.config.js'),
            tsConfig: zod_1.z.string().default('tsconfig.json'),
            metroConfig: zod_1.z.string().default('metro.config.js'),
        }),
        app: zod_1.z.object({
            type: zod_1.z.string().optional(),
            entry: zod_1.z.string(),
        }),
    });
});
