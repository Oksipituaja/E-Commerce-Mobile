var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "path", "fast-glob", "fs-extra", "../../config", ".", "./config-types", "path", "child_process", "..", "../init", "../init/addReactNativeWebPatch"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateConfigNextApp = generateConfigNextApp;
    const path = __importStar(require("path"));
    const fast_glob_1 = __importDefault(require("fast-glob"));
    const fs_extra_1 = require("fs-extra");
    const config_1 = require("../../config");
    const _1 = require(".");
    const config_types_1 = require("./config-types");
    const path_1 = require("path");
    const child_process_1 = require("child_process");
    const __1 = require("..");
    const init_1 = require("../init");
    const addReactNativeWebPatch_1 = require("../init/addReactNativeWebPatch");
    //next project type initialization
    function getNextProjectType(cwd) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield fast_glob_1.default.glob('**/*', {
                cwd,
                deep: 3,
                ignore: config_types_1.PROJECT_SHARED_IGNORE,
            });
            const isNextProject = files.find((file) => file.startsWith('next.config.'));
            if (!isNextProject) {
                return undefined;
            }
            const isUsingSrcDir = yield (0, fs_extra_1.pathExists)(path.resolve(cwd, 'src'));
            const isUsingAppDir = yield (0, fs_extra_1.pathExists)(path.resolve(cwd, `${isUsingSrcDir ? 'src/' : ''}app`));
            if (isUsingAppDir) {
                return isUsingSrcDir ? 'next-app-src' : 'next-app';
            }
            return isUsingSrcDir ? 'next-pages-src' : 'next-pages';
        });
    }
    function resolvedNextJsPaths(resultConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const resolvedNextJsPaths = {
                tailwind: {
                    config: (0, _1.pathResolver)(resultConfig.tailwind.config),
                    css: (0, _1.pathResolver)(resultConfig.tailwind.css),
                },
                config: {
                    postCssConfig: (0, _1.pathResolver)(resultConfig.config.postCssConfig || ''),
                    nextConfig: (0, _1.pathResolver)(resultConfig.config.nextConfig || ''),
                    tsConfig: (0, _1.pathResolver)(resultConfig.config.tsConfig || ''),
                },
                app: {
                    entry: (0, _1.pathResolver)(resultConfig.app.entry || ''),
                    type: (_a = resultConfig === null || resultConfig === void 0 ? void 0 : resultConfig.app) === null || _a === void 0 ? void 0 : _a.type,
                    registry: ((_b = resultConfig === null || resultConfig === void 0 ? void 0 : resultConfig.app) === null || _b === void 0 ? void 0 : _b.registry)
                        ? resultConfig.app.registry.replace(/\\/g, '/')
                        : undefined,
                    page: ((_c = resultConfig === null || resultConfig === void 0 ? void 0 : resultConfig.app) === null || _c === void 0 ? void 0 : _c.page)
                        ? path.resolve(_1._currDir, resultConfig.app.page)
                        : '',
                },
            };
            return resolvedNextJsPaths;
        });
    }
    //project specific initialization: nextjs
    function initNatiwindNextApp(resolvedConfig, permission, isNextjs15) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            try {
                const NextTransformer = (0, path_1.join)(__dirname, `${config_1.config.codeModesDir}/${config_1.config.nextJsProject}`);
                const nextConfigPath = resolvedConfig.config.nextConfig;
                let nextTransformerPath = '';
                let fileType = '';
                if (isNextjs15) {
                    yield (0, addReactNativeWebPatch_1.addReactNativeWebPatch)();
                }
                if (nextConfigPath === null || nextConfigPath === void 0 ? void 0 : nextConfigPath.endsWith('.mjs')) {
                    fileType = 'mjs';
                }
                else if (nextConfigPath === null || nextConfigPath === void 0 ? void 0 : nextConfigPath.endsWith('.js')) {
                    fileType = 'js';
                }
                else if (nextConfigPath === null || nextConfigPath === void 0 ? void 0 : nextConfigPath.endsWith('.ts')) {
                    fileType = 'ts';
                }
                nextTransformerPath = (0, path_1.join)(`${NextTransformer}/next-config-${fileType}-transform.ts`);
                if (nextTransformerPath && nextConfigPath) {
                    (0, child_process_1.execSync)(`npx jscodeshift -t ${nextTransformerPath}  ${nextConfigPath}`);
                }
                if (((_b = (_a = resolvedConfig.app) === null || _a === void 0 ? void 0 : _a.entry) === null || _b === void 0 ? void 0 : _b.includes('layout')) &&
                    resolvedConfig.app.registry) {
                    // if app router add registry file to root
                    const registryPath = isNextjs15 ? ['nextjs', 'next15'] : ['common'];
                    const registryContent = yield (0, fs_extra_1.readFile)((0, path_1.join)(__dirname, config_1.config.templatesDir, ...registryPath, 'registry.tsx'), 'utf8');
                    yield (0, fs_extra_1.writeFile)(resolvedConfig.app.registry, registryContent, 'utf8');
                    const pageTransformerPath = (0, path_1.join)(`${NextTransformer}/next-add-page-type-transform.ts`);
                    ((_c = resolvedConfig.app.page) === null || _c === void 0 ? void 0 : _c.length) &&
                        (0, child_process_1.execSync)(`npx jscodeshift -t ${pageTransformerPath} ${resolvedConfig.app.page}`);
                }
                if ((_e = (_d = resolvedConfig.app) === null || _d === void 0 ? void 0 : _d.entry) === null || _e === void 0 ? void 0 : _e.includes('_app')) {
                    const pageDirPath = path.dirname(resolvedConfig.app.entry);
                    const docsPagePath = (0, path_1.join)(pageDirPath, '_document.tsx');
                    const transformerPath = (0, path_1.join)(`${NextTransformer}/next-document-update-transform.ts`);
                    (0, child_process_1.execSync)(`npx jscodeshift -t ${transformerPath} ${docsPagePath}`);
                }
                const transformerPath = (0, path_1.join)(`${NextTransformer}/next-add-provider-transform.ts`);
                const rawCssPath = (0, path_1.relative)(_1._currDir, resolvedConfig.tailwind.css);
                const cssImportPath = '@/'.concat(rawCssPath);
                (0, child_process_1.execSync)(`npx jscodeshift -t ${transformerPath}  ${resolvedConfig.app.entry} --componentsPath=${config_1.config.writableComponentsPath} --cssImportPath=${cssImportPath} `);
                yield (0, init_1.commonInitialization)(config_1.config.nextJsProject, resolvedConfig, permission);
            }
            catch (err) {
                throw new Error(err.message);
            }
        });
    }
    function generateConfigNextApp(permission, isNextjs15) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const projectType = yield getNextProjectType(_1._currDir);
            const entryPath = yield (0, _1.getFilePath)(['**/*layout.*', '**/*_app.*']);
            const globalCssPath = yield (0, _1.getFilePath)([
                '**/*globals.css',
                '**/*global.css',
            ]);
            const tailwindConfigPath = yield (0, _1.getFilePath)(['tailwind.config.*']);
            const postCssConfigPath = yield (0, _1.getFilePath)(['postcss.config.*']);
            const nextConfigPath = yield (0, _1.getFilePath)(['next.config.*']);
            const tsConfigPath = yield (0, _1.getFilePath)(['tsconfig.*']);
            let registryPath = '';
            if (projectType === null || projectType === void 0 ? void 0 : projectType.includes('app')) {
                const appDirectory = (0, _1.findDirectory)(_1._currDir, ['src/app', 'app']);
                registryPath = path.resolve(_1._currDir, appDirectory, 'registry.tsx');
            }
            const pagePath = entryPath.includes('layout.')
                ? yield (0, _1.getFilePath)(['**/*page.*'])
                : undefined;
            const gluestackConfig = {
                tailwind: {
                    config: tailwindConfigPath.length
                        ? tailwindConfigPath
                        : 'tailwind.config.js',
                    css: globalCssPath.length ? globalCssPath : 'global.css',
                },
                app: {
                    entry: entryPath,
                    // write a function to get current components path
                    components: config_1.config.writableComponentsPath,
                },
            };
            const resolvedGluestackConfig = {
                tailwind: {
                    config: tailwindConfigPath.length
                        ? tailwindConfigPath
                        : 'tailwind.config.js',
                    css: globalCssPath.length ? globalCssPath : 'global.css',
                },
                config: {
                    postCssConfig: postCssConfigPath.length
                        ? postCssConfigPath
                        : 'postcss.config.js',
                    nextConfig: nextConfigPath.length ? nextConfigPath : 'next.config.js',
                    tsConfig: tsConfigPath.length ? tsConfigPath : 'tsconfig.json',
                },
                app: {
                    type: projectType,
                    entry: entryPath,
                    registry: registryPath,
                    page: pagePath,
                },
            };
            (0, _1.generateConfig)(gluestackConfig);
            const resolvedConfig = yield resolvedNextJsPaths(resolvedGluestackConfig);
            const filesTobeEnsured = [
                (_a = resolvedConfig.app.registry) !== null && _a !== void 0 ? _a : '',
                resolvedConfig.config.tsConfig,
                resolvedConfig.tailwind.css,
                resolvedConfig.config.postCssConfig,
                (0, _1.pathResolver)('nativewind-env.d.ts'),
            ];
            const filesEnsured = yield (0, __1.ensureFilesPromise)(filesTobeEnsured);
            if (permission && filesEnsured) {
                yield yield initNatiwindNextApp(resolvedConfig, permission, isNextjs15);
            }
        });
    }
});
