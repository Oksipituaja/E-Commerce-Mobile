var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs-extra", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateConfig = void 0;
    const fs_extra_1 = __importDefault(require("fs-extra"));
    const path_1 = __importStar(require("path"));
    const currDir = process.cwd();
    const updateConfig = () => {
        // Check if babel.config.js exists
        // Check if babel.rc exists
        // babel.rc
        //  check for module Resolver in babel.rc
        //   if exist
        //     update alias in module Resolver
        //   if not exist create alias in babel.rc
        //     install babel module resolver
        //     update alias in module Resolver
        const babelConfigPath = path_1.default.join(currDir, 'babel.config.js');
        if (fs_extra_1.default.existsSync(babelConfigPath)) {
            const data = fs_extra_1.default.readFileSync(babelConfigPath, 'utf-8');
            const configObjectRegex = /return\s*([\s\S]*)};/;
            const configMatch = data.match(configObjectRegex);
            if (!configMatch) {
                console.error('Configuration object not found.');
                process.exit(1);
            }
            const returnData = configMatch[1];
            // Remove outer curly braces to make the content JSON-like
            if (!fs_extra_1.default.existsSync((0, path_1.join)(currDir, 'temp'))) {
                fs_extra_1.default.mkdirSync((0, path_1.join)(currDir, 'temp'));
            }
            // Regular expression to match both require and import statements
            const importRegex = /(require\s*\(|import\s+(?:\w+\s+)?from\s+)(["'])([^"']+)\2\s*\)?;?/g;
            // Array to store matched import paths
            const importPaths = [];
            // let match;
            // Find all matches of the import regex in the string
            // while ((match = importRegex.match(returnData))) {
            //   importPaths.push(match[3]);
            // }
            // console.log(importPaths);
            // fs.writeFileSync(join(currDir, 'temp', 'temp.js'), returnData);
            // const res = require(join(currDir, 'temp', 'temp.js'));
            // console.log(res, res.plugins);
            // // Parse the JSON-like string as an object
            // const configObject = JSON.parse(`{${jsonString}}`);
            // // Remove unwanted characters and create a JSON-parseable string
            // const jsonConfigString = returnData.replace(/(^\s*{)|(\}\s*$)/g, '');
            // // console.log(JSON.parse(`{${jsonConfigString}}`));
        }
    };
    exports.updateConfig = updateConfig;
});
