var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "commander", "zod", "os", "path", "../util/handle-error", "@clack/prompts", "../util/add", "../config", "../util", "../util/config"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add = void 0;
    const commander_1 = require("commander");
    const zod_1 = require("zod");
    const os_1 = __importDefault(require("os"));
    const path_1 = require("path");
    const handle_error_1 = require("../util/handle-error");
    const prompts_1 = require("@clack/prompts");
    const add_1 = require("../util/add");
    const config_1 = require("../config");
    const util_1 = require("../util");
    const config_2 = require("../util/config");
    const _homeDir = os_1.default.homedir();
    const addOptionsSchema = zod_1.z.object({
        components: zod_1.z.array(zod_1.z.string()),
        all: zod_1.z.boolean(),
        useNpm: zod_1.z.boolean(),
        useYarn: zod_1.z.boolean(),
        usePnpm: zod_1.z.boolean(),
        useBun: zod_1.z.boolean(),
        path: zod_1.z.string().optional(),
        templateOnly: zod_1.z.boolean(),
        alpha: zod_1.z.boolean(),
    });
    exports.add = new commander_1.Command()
        .name('add')
        .description('add a component to your project')
        .argument('[...components]', 'the components to add')
        .option('--all, --all', 'add all available components', false)
        .option('--use-npm ,useNpm', 'use npm to install dependencies', false)
        .option('--use-yarn, useYarn', 'use yarn to install dependencies', false)
        .option('--use-pnpm, usePnpm', 'use pnpm to install dependencies', false)
        .option('--use-bun, useBun', 'use bun to install dependencies', false)
        .option('--path <path>', 'path to the components directory')
        .option('--template-only templateOnly', 'Only install the template without installing dependencies', false)
        .option('--alpha', 'Install to alpha versions of components', false)
        .action((components, opts, command) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        try {
            const options = addOptionsSchema.parse(Object.assign({ components: command.args.length > 0 ? command.args : [] }, opts));
            const isTemplate = options.templateOnly;
            !isTemplate && prompts_1.log.info('\n\x1b[1mWelcome to gluestack-ui!\x1b[0m\n');
            if ((!options.all && ((_a = options.components) === null || _a === void 0 ? void 0 : _a.length) === 0) ||
                (options.all && ((_b = options.components) === null || _b === void 0 ? void 0 : _b.length) > 0)) {
                prompts_1.log.error('\x1b[31mInvalid arguement, please provide the component/hook name you want to add or --all.\x1b[0m');
                process.exit(0);
            }
            const initialized = yield (0, config_2.checkIfInitialized)(util_1.projectRootPath);
            if (!initialized) {
                prompts_1.log.warning(`\x1b[33mgluestack is not initialized in the project. use 'npx gluestack-ui init' or 'help' to continue.\x1b[0m`);
                process.exit(1);
            }
            //if multiple package managers are used
            if ((options.useNpm && options.useYarn) ||
                (options.useNpm && options.usePnpm) ||
                (options.useYarn && options.usePnpm)) {
                prompts_1.log.error(`\x1b[31mMultiple package managers selected. Please select only one package manager.\x1b[0m`);
                process.exit(1);
            }
            //define package manager
            (0, util_1.getPackageMangerFlag)(options);
            //function to get current path where GUIProvider is located
            const currWritablePath = yield (0, config_2.getComponentsPath)(util_1.projectRootPath);
            if (currWritablePath) {
                config_1.config.writableComponentsPath = currWritablePath;
            }
            if (options.path && !(0, util_1.isValidPath)(options.path)) {
                prompts_1.log.error(`\x1b[31mInvalid path "${options.path}". Please provide a valid path for installing components.\x1b[0m`);
                process.exit(1);
            }
            if (options.path && options.path !== config_1.config.writableComponentsPath) {
                yield (0, util_1.checkWritablePath)(options.path);
                config_1.config.writableComponentsPath = options.path;
            }
            !isTemplate &&
                (yield (0, util_1.cloneRepositoryAtRoot)((0, path_1.join)(_homeDir, config_1.config.gluestackDir), options.alpha));
            // define args based on --all or components
            const args = options.all
                ? { addAll: true }
                : { componentArgs: options.components.map((c) => c.toLowerCase()) };
            try {
                yield (0, add_1.componentAdder)(args);
            }
            catch (err) {
                prompts_1.log.error(`\x1b[31mError: ${err.message}\x1b[0m`);
            }
        }
        catch (err) {
            (0, handle_error_1.handleError)(err);
        }
    }));
});
