var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "commander", "zod", "../util/handle-error", "@clack/prompts", "../util/init", "../config", "../util", "path", "fs", "../util/check-next-version"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.init = void 0;
    const commander_1 = require("commander");
    const zod_1 = require("zod");
    const handle_error_1 = require("../util/handle-error");
    const prompts_1 = require("@clack/prompts");
    const init_1 = require("../util/init");
    const config_1 = require("../config");
    const util_1 = require("../util");
    const path_1 = __importDefault(require("path"));
    const fs_1 = __importDefault(require("fs"));
    const check_next_version_1 = require("../util/check-next-version");
    const initOptionsSchema = zod_1.z.object({
        useNpm: zod_1.z.boolean(),
        useYarn: zod_1.z.boolean(),
        usePnpm: zod_1.z.boolean(),
        useBun: zod_1.z.boolean(),
        path: zod_1.z.string().optional(),
        templateOnly: zod_1.z.boolean(),
        projectType: zod_1.z.string(),
        alpha: zod_1.z.boolean(),
    });
    exports.init = new commander_1.Command()
        .name('init')
        .description('Initialize gluestack into your project')
        .option('--use-npm ,useNpm', 'use npm to install dependencies', false)
        .option('--use-yarn, useYarn', 'use yarn to install dependencies', false)
        .option('--use-pnpm, usePnpm', 'use pnpm to install dependencies', false)
        .option('--use-bun, useBun', 'use bun to install dependencies', false)
        .option('--path <path>', 'path to the components directory. defaults to components/ui')
        .option('--template-only templateOnly', 'Only install the template without installing dependencies', false)
        .option('--projectType <projectType>', 'Type of project to initialize', 'library')
        .option('--alpha', 'Use alpha version of the components', false)
        .action((opts) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const options = initOptionsSchema.parse(Object.assign({}, opts));
            const isTemplate = options.templateOnly;
            console.log('\n\x1b[1mWelcome to gluestack-ui!\x1b[0m\n');
            const cwd = process.cwd();
            //if cwd doesn't have package.json file
            if (!fs_1.default.existsSync(path_1.default.join(cwd, 'package.json'))) {
                prompts_1.log.error(`\x1b[31mNo package.json found in the current directory. Please run this command in a directory with a package.json file.\x1b[0m`);
                process.exit(1);
            }
            //TODO : remove this check once nextjs 15 is supported properly
            const isNextjs15 = yield (0, check_next_version_1.checkNextVersion)();
            if (isNextjs15) {
                prompts_1.log.info(`Next.js 15 is not supported by the init command.\n Please use 'npm create gluestack-ui@latest' to clone a new next 15 project.\n`);
                process.exit(1);
            }
            //if multiple package managers are used
            if ((options.useNpm && options.useYarn) ||
                (options.useNpm && options.usePnpm) ||
                (options.useYarn && options.usePnpm)) {
                prompts_1.log.error(`\x1b[31mMultiple package managers selected. Please select only one package manager.\x1b[0m`);
                process.exit(1);
            }
            //define package manager
            (0, util_1.getPackageMangerFlag)(options);
            //if path option is used
            if (options.path) {
                // Check if the string starts with "/" or "."
                if (!(0, util_1.isValidPath)(options.path)) {
                    prompts_1.log.error(`\x1b[31mInvalid path "${options.path}". Please provide a valid path for installing components.\x1b[0m`);
                    process.exit(1);
                }
                if (options.path !== config_1.config.writableComponentsPath) {
                    yield (0, util_1.checkWritablePath)(options.path);
                    //check this change with all project types
                    config_1.config.writableComponentsPath = options.path;
                }
            }
            // Detect project type
            const projectType = isTemplate
                ? options.projectType
                : yield (0, util_1.detectProjectType)(cwd);
            // Initialize the gluestack
            (0, init_1.InitializeGlueStack)({ projectType, isTemplate, alpha: options.alpha });
        }
        catch (err) {
            (0, handle_error_1.handleError)(err);
        }
    }));
});
