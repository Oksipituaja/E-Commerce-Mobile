var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "path", "./config", "@clack/prompts", "fs-extra", "os"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getComponentDependencies = exports.getIgnoredComponents = void 0;
    exports.getProjectBasedDependencies = getProjectBasedDependencies;
    const path_1 = require("path");
    const config_1 = require("./config");
    const prompts_1 = require("@clack/prompts");
    const fs_extra_1 = __importDefault(require("fs-extra"));
    const os_1 = __importDefault(require("os"));
    const __homeDir = os_1.default.homedir();
    const projectBasedDependencies = {
        nextjs: {
            dependencies: {
                postcss: '',
                autoprefixer: '',
                'react-native-web': '',
                '@gluestack/ui-next-adapter': 'latest',
            },
            devDependencies: {
                '@types/react-native': '0.72.8',
            },
        },
        expo: {
            dependencies: {
                'react-native-reanimated': '',
            },
        },
        'react-native-cli': {
            dependencies: {
                'react-native-reanimated': '',
            },
            devDependencies: {
                'babel-plugin-module-resolver': '',
            },
        },
    };
    // Get dependency JSON
    function getDependencyJSON() {
        return __awaiter(this, void 0, void 0, function* () {
            const dependencyJSONPath = (0, path_1.join)(__homeDir, config_1.config.gluestackDir, config_1.config.dependencyConfigPath);
            if (!fs_extra_1.default.existsSync(dependencyJSONPath)) {
                prompts_1.log.error(`\x1b[31mError: Dependency JSON file not found at ${dependencyJSONPath}\x1b[0m`);
                process.exit;
            }
            const dependencyJSON = yield fs_extra_1.default.readJSON(dependencyJSONPath);
            return dependencyJSON;
        });
    }
    // Get project based dependencies
    function getProjectBasedDependencies(projectType, style) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                if (style === config_1.config.nativeWindRootPath &&
                    projectType &&
                    projectType !== 'library') {
                    return {
                        dependencies: projectBasedDependencies[projectType].dependencies,
                        devDependencies: ((_a = projectBasedDependencies[projectType]) === null || _a === void 0 ? void 0 : _a.devDependencies) || {},
                    };
                }
                return { dependencies: {}, devDependencies: {} };
            }
            catch (error) {
                throw new Error(error.message);
            }
        });
    }
    // Ignore components that are in development or not in supported list
    const getIgnoredComponents = () => __awaiter(void 0, void 0, void 0, function* () {
        const dependencyJSON = yield getDependencyJSON();
        return dependencyJSON.IgnoredComponents;
    });
    exports.getIgnoredComponents = getIgnoredComponents;
    // Get dependencies for a component
    const getComponentDependencies = (componentName) => __awaiter(void 0, void 0, void 0, function* () {
        const dependencyJSON = yield getDependencyJSON();
        const config = dependencyJSON.components[componentName];
        if (!config) {
            return {
                dependencies: {},
                devDependencies: {},
                additionalComponents: [],
                hooks: [],
            };
        }
        return {
            dependencies: config.dependencies || {},
            devDependencies: config.devDependencies || {},
            additionalComponents: config.additionalComponents || [],
            hooks: config.hooks || [],
        };
    });
    exports.getComponentDependencies = getComponentDependencies;
});
